<!DOCTYPE html>
<html>
   <head>
      <title>WAMP - ウェブソケット・アプリケーション・メッセージング・プロトコル</title>

      <!-- use Google Chrome Frame on IE when available -->
      <meta http-equiv="X-UA-Compatible" content="chrome=1" />

      <link rel="shortcut icon" href="/static/img/favicon.ico">
      <link rel="stylesheet" href="/static/css/layout_t.css">

      

   <link rel="stylesheet" href="/static/css/page_t_spec.css">

   <link href="/static/deps/syntaxhighlighter/styles/shCore.css" rel="stylesheet" type="text/css" />
   <link href="/static/deps/syntaxhighlighter/styles/shThemeDefault.css" rel="stylesheet" type="text/css" />

   <script src="/static/deps/syntaxhighlighter/scripts/XRegExp.js" type="text/javascript"></script>
   <script src="/static/deps/syntaxhighlighter/scripts/shCore.js" type="text/javascript"></script>
   <script src="/static/deps/syntaxhighlighter/scripts/shBrushJScript.js" type="text/javascript"></script>
   <script type="text/javascript">
     SyntaxHighlighter.all()
   </script>



      
         <script type="text/javascript">
           var _gaq = _gaq || [];
           _gaq.push(['_setAccount', 'UA-23019220-4']);
           _gaq.push(['_trackPageview']);

           (function() {
             var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
             ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
             var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
           })();
         </script>
      
   </head>
   <body>

      

      <div id="sticky_footer_outer_wrapper">

         <div id="sticky_footer_central_content_wrapper">

            <div id="topband"></div>

            <div id="logo_wrapper">
               <div id="logo_block">
                  <div id="logo">
                     <a href="/"><img src="/static/img/logo.png" width="624" height="136" border="0" alt="WAMP - ウェブソケット・アプリケーション・メッセージングプロトコル"></img></a>
                  </div>
                  <div id="navbar">
                     <a href="/"  class="navitem" >Home</a>
                     <a href="/why"  class="navitem" >なぜ使うの?</a>
                     <a href="/implementations"  class="navitem" >実装</a>
                     <a href="/spec"  class="navitem_selected" >仕様</a>
                     <a href="/faq"  class="navitem" >FAQ</a>
                  </div>
               </div>
            </div>

            <div id="content_wrapper">
               <div id="content_block">

                  

   <div id="page_wrapper">

      <a name="top"></a>
      <h1 class="title">ウェブソケット・アプリケーション・メッセージング・プロトコル</h1>

      <p>
         ウェブソケット・アプリケーション・メッセージング・プロトコルの概要について記述します。
         当文書はバージョン<b>1</b>について記述し、内容は開発者が相互運用可能な実装を作り出すのに足るはずです。
         個々の機能は WAMP v2で変更され得ます。
      </p>

      <br>

      <div id="toc">
         <ul>
            <li>
               <a href="#overview">概要(Overview)</a>
               <ul>
                  <li>
                     <a href="#building_blocks">構成要素(原文:Building Blocks)</a>
                  </li>
                  <li>
                     <a href="#payload_format">ペイロードの様式(原文:Payload Format)</a>
                  </li>
                  <li>
                     <a href="#message_types">メッセージの種類(原文:Message Types)</a>
                  </li>
                  <li>
                     <a href="#uris_and_curies">URIとCURI (原文:URIs and CURIEs)</a>
                  </li>
               </ul>
            </li>
            <li>
               <a href="#auxiliary_messages">補助的なメッセージ(原文:Auxiliary Messages)</a>
               <ul>
                  <li><a href="#welcome_message">WELCOME Message</a></li>
                  <li><a href="#prefix_message">PREFIX Message</a></li>
               </ul>
            </li>
            <li>
               <a href="#rpc">Remote Procedure Calls</a>
               <ul>
                  <li><a href="#call_message">CALL Message</a></li>
                  <li><a href="#callresult_message">CALLRESULT Message</a></li>
                  <li><a href="#callerror_message">CALLERROR Message</a></li>
               </ul>
            </li>
            <li>
               <a href="#pubsub">発行と購読(原文: Publish &amp; Subscribe)</a>
               <ul>
                  <li><a href="#subscribe_message">購読開始(SUBSCRIBE Message)</a></li>
                  <li><a href="#unsubscribe_message">購読終了(UNSUBSCRIBE Message)</a></li>
                  <li><a href="#publish_message">発行(PUBLISH Message)</a></li>
                  <li><a href="#event_message">通知(EVENT Message)</a></li>
               </ul>
            </li>
            <li>
               <a href="#references">参考文献(References)</a>
            </li>
         </ul>
      </div>


      <a name="overview"></a>
      <h2>概要(Overview)</h2>
      <p>
      </p>


      <a name="building_blocks"></a>
      <h3>構成要素(Building Blocks)</h3>
      <p>
         WAMPは確立されたwebの標準に基づいています:
         <!-- WAMP is based on established Web standards: -->
         <ul>
            <li>WebSocket</li>
            <li>JSON</li>
            <li>URIs</li>
         </ul>
      </p>
      <p>
         WAMPは現状これらの標準に基づいていますが、
         <!-- Though WAMP is currently defined with respect to above concrete standards,-->
         実際的には次のような仮定のみに依っています。
         <!-- effectively it only makes the following assumptions. -->
      </p>

      <p>
         <b>トランスポート(Transport)</b><br/>
         信頼できる、順序が守られた、全二重の通信路が仮定されています。
         <!-- A reliable, ordered, full-duplex message channel is assumed. -->
         既定はWebSocketがトランスポートです。
         <!-- The default binding is <i>WebSocket</i> as <i>Transport</i>. -->
      </p>

      <p>
         <b>直列化(Serialization)</b><br/>
         メッセージのペイロードを直列化する様式に関しては、次のような機能を仮定してます。
         <!-- A message payload serialization format is assumed that at least provides: -->
         整数、文字列、リスト
         <!-- integers, strings and lists. -->
         既定はJSONを直列化の方法として用います。
         <!-- The default binding is <i>JSON</i> as <i>Serialization</i>.-->
      </p>

      <p>
         <b>識別子(IDs)</b><br/>
         識別子の名前空間は大域的な割り付けと解決可能性を仮定しています。 
         <!-- An ID space that allows global assignment and resolution is assumed. -->
         既定はHTTPのスキームのURIをtopicとprocedureの識別子として用います。
         <!-- The default binding is <i>URIs</i> from the HTTP scheme as <i>IDs</i> 
         for both topics and procedures. -->
      </p>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="payload_format"></a>
      <h3>ペイロードの様式(Payload Format)</h3>
      <p>
         すべてのメッセージは<a href="http://tools.ietf.org/html/rfc6455" target="_blank">WebSocket</a>の<i>text</i>種別のメッセージとして送信される。
         <!-- All messages are transmitted as <a href="http://tools.ietf.org/html/rfc6455" target="_blank">WebSocket</a> -->
         <!-- messages of payload type <i>text</i>, and hence -->
         したがって、<a href="http://tools.ietf.org/html/rfc3629" target="_blank">UTF-8</a>でエンコードされ、
         <!-- <a href="http://tools.ietf.org/html/rfc3629" target="_blank">UTF-8</a> encoded, -->
         妥当な<a href="http://tools.ietf.org/html/rfc4627" target="_blank">JSON</a>.である。
         <!-- with the payload being valid <a href="http://tools.ietf.org/html/rfc4627" target="_blank">JSON</a>.-->
      </p>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="message_types"></a>
      <h3>メッセージの種別(Message Types)</h3>

      <p>
         WAMPでは、2つのWebSocket端点、<i>クライアント</i>と<i>サーバ</i>との間で
         通信での意味を与えるためにメッセージの種別を定めている。
         <!-- WAMP defines the message types which are used in the communication between two -->
         <!-- WebSocket endpoints, the <i>client</i> and the <i>server</i>, and describes associated semantics. -->
      </p>

      <p>
         WAMPは次の9つの種別を用いている。
         <!-- WAMP is based on the following 9 message types: -->
      </p>

      <table class="developertable">
         <tr><th>Message</th><th>Type ID</th><th>メッセージが送られる向き</th><th>分類</th></tr>
         <tr><td><a href="#welcome">WELCOME</a></td><td>0</td><td>サーバがクライアントに送る</td><td>補助</td></tr>
         <tr><td><a href="#prefix">PREFIX</a></td><td>1</td><td>クライアントがサーバに送る</td><td>補助</td></tr>
         <tr><td><a href="#call">CALL</a></td><td>2</td><td>クライアントがサーバに送る</td><td>RPC</td></tr>
         <tr><td><a href="#call_result">CALLRESULT</a></td><td>3</td><td>サーバがクライアントに送る</td><td>RPC</td></tr>
         <tr><td><a href="#call_error">CALLERROR</a></td><td>4</td><td>サーバがクライアントに送る</td><td>RPC</td></tr>
         <tr><td><a href="#subscribe">SUBSCRIBE</a></td><td>5</td><td>クライアントがサーバに送る</td><td>PubSub</td></tr>
         <tr><td><a href="#unsubscribe">UNSUBSCRIBE</a></td><td>6</td><td>クライアントがサーバに送る</td><td>PubSub</td></tr>
         <tr><td><a href="#publish">PUBLISH</a></td><td>7</td><td>クライアントがサーバに送るserver</td><td>PubSub</td></tr>
         <tr><td><a href="#event">EVENT</a></td><td>8</td><td>サーバがクライアントに送る</td><td>PubSub</td></tr>
      </table>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="uris_and_curies"></a>
      <h3>URIs and CURIEs</h3>
      <p>だれか書いてくれ〜(原文: Write me.)</p>
      <div class="up">
            <a href="#top">Up</a>
         </div>



      <a name="auxiliary_messages"></a>
      <h2>補助メッセージ(Auxiliary Messages)</h2>

      <p>常に最初にサーバがクライアントに送信するメッセージ。</p>
      <!-- <p>The first server-to-client message sent by a WAMP server is always</p> -->
      <ul>
         <li><span class="message_part">WELCOME</span></li>
      </ul>

      <p>
         いずれの交信様式においてもクライアントは次のメッセージを<b>使ってもよい</b>
         <!-- With both messaging patterns, a client MAY use the following-->
         <!-- client-to-server message: -->
      </p>
      <ul>
         <li><span class="message_part">PREFIX</span></li>
      </ul>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="welcome_message"></a>
      <h3>WELCOME Message</h3>
      <p>
         WAMPクライアントがWAMPサーバに接続したときにまず最初にサーバが
         クライアントに送信するメッセージは、常につぎのようなものでなければならない。
         <!-- When a WAMP client connects to a WAMP server, the very first message sent -->
         <!-- by the server is always a -->
      </p>
      <p class="message">[ TYPE_ID_WELCOME , sessionId , protocolVersion, serverIdent ]</p>
      <p>
         <span
         class="message_part">sessionId</span>は、サーバが生成したランダムで
         個々の接続毎にユニークなな文字列である。
         <!-- message. The <span class="message_part">sessionId</span> is a string that is -->
         <!-- randomly generated by the server and unique to the specific WAMP session. -->
         <span class="message_part">sessionId</span> は、少なくとも2つの状況で使うことができる。
         <!-- The <span class="message_part">sessionId</span> can be used for at least two -->
         1) 発行時に特定のクライアントをその発行対象のリストに含めたり排除したりする為に使う。
         <!-- situations: 1) specifying lists of excluded or eligible clients when publishing -->
         2) 認証・権限の付与を行う為に使う。
         <!-- event and 2) in the context of performing authentication or authorization.-->
      </p>
      <p>
         <span class="message_part">protocolVersion</span>は整数で、サーバが
         取り扱うことができるWAMPのプロトコルバージョンを指定し、
         現状では1で無ければならない(Must)。
         <!-- The <span class="message_part">protocolVersion</span> is an integer -->
         <!-- that gives the WAMP protocol version the server speaks, currently it MUST be 1. -->
      </p>
      <p>
         <span class="message_part">serverIdent</span> は、サーバが自身の
         情報を与えるために使うことができる文字列である。
         具体的にはバージョン、ソフトウェア名、プラットフォーム、名前などである。
         <!-- The <span class="message_part">serverIdent</span> is a string the server may-->
         <!-- use to disclose it's version, software, platform or identity.-->
      </p>

      <div class="msgex">
         <span class="message_part">WELCOME</span> message: session ID = "v59mbCGDXZ7WTyxB"
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [0, "v59mbCGDXZ7WTyxB", 1, "Autobahn/0.5.1"]
         </pre>
      </div>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="prefix_message"></a>
      <h3>PREFIX Message</h3>
      RPCでの<i>procedures</i> (と<i>errors</i>)と 発行と購読の<i>topics</i>
      が<a href="#curie">URIs or CURIEs</a>を用いて識別される。
      <!-- <p>Both <i>procedures</i> (and <i>errors</i>) in RPC and <i>topics</i> in PubSub are identified using <a href="#curie">URIs or CURIEs</a>. -->

      URIが用いられるときは常に、そのURIによってprocedure/topicの完全な識別が提供される。
      <!-- Whenever a URI is used, full identification of the procedure/topic is provided by this URI. -->
      しかしながら、URIはとても長く成りえて、開発者にとって入力が面倒である。
      そして多くの小さなメッセージがやりとりされる際には
      かなりの長さをネットワーク上に送らなくてはならなくなる。
      <!-- However, URIs can get long, which means tedious to input for developers, and also resulting in-->
      <!-- considerable volume on wire, when many small messages are exchanged.-->
      </p>
      <p>
      この問題に対処するためにURIは、CURIE構文を用いて短縮されてもよい(MAY)。
      CURIEとはCompact URI Expressionのことである。
      <!-- To counter that, URIs MAY be abbreviated using the CURIE (Compact URI Expression) syntax.-->
      <!-- For example, the (full) URI:-->
      たとえば次のような(完全な)URIであれば、
      </p>

      <center><span class="uri">http://example.com/simple/calc#square</span></center>

      <p><!--may be abbreviated as--> 次のように短縮される:</p>

      <center><span class="uri">calc:square</span></center>

      <p>
      ただし、<i>接頭子</i> <span class="uri">calc</span>
      は事前に次を意味すると合意しているとする。
      <!--when it was previously agreed that the <i>prefix</i> <span class="uri">calc</span> is meant to stand for-->

      <center><span class="uri">http://example.com/simple/calc#</span></center>
      <br/>

      <p>
      このような合意を事前に成立させるためにクライアント(訳注: サーバじゃないんだ？！)は、<span class="message_part">PREFIX</span>メッセージをサーバに送信する。</p>
      <!-- To establish such agreement, a client sends a <span class="message_part">PREFIX</span> message</p> -->
      <p class="message">[ TYPE_ID_PREFIX , prefix , URI ]</p>
      <p><!-- to the server.--></p>

      <div class="msgex">
         <span class="message_part">PREFIX</span> message
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [1, "calc", "http://example.com/simple/calc#"]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">PREFIX</span> message
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [1, "keyvalue", "http://example.com/simple/keyvalue#"]
         </pre>
      </div>


      <p>合意は接続毎で、その寿命はサーバが
      <!--The agreement is per-connection, and has a lifetime starting with the server receiving a -->
      <!-- <span class="message_part">PREFIX</span> message establishing a prefix-to-URI mapping, and ending -->
      prefixとURIのマッピングを定義する
      <span class="message_part">PREFIX</span>messageを受け取った時から始まり、
      使用しているWebSocketが閉じられたときに終了する。
      <!-- with the WebSocket connection. --></p>

      <p>
      メッセージはJSONリストであり、それは次の要素を順に含む。
      それらは、<span class="message_part">TYPE_ID_PREFIX</span> 
      メッセージ種別識別子の整数値、
      <span class="message_part">prefix</span>、 prefixとして使用される文字列、
      <span class="message_part">URI</span>, prefixによって短縮表現されるURI
      である。
      <!-- The message is a JSON list consisting of <span class="message_part">TYPE_ID_PREFIX</span>, the message type ID as an integer, followed -->
      <!-- by the <span class="message_part">prefix</span>, a string to be used as prefix, -->
      <!-- followed by <span class="message_part">URI</span>, the URI which is subsequently to be abbreviated using the prefix.</p> -->

      <p>

      <span class="message_part">prefix</span>と<span class="message_part">URI</span>は次の仕様をみたさなければならない(MUST)。
      <!-- Both the <span class="message_part">prefix</span> and the <span class="message_part">URI</span> MUST follow the requirements as -->
      ??(訳注:意味とれず)
      <!-- set forth in <a href="#curie">URIs or CURIEs</a> -->
      </p>

      <div class="up">
            <a href="#top">Up</a>
         </div>



      <a name="rpc"></a>
      <h2>Remote Procedure Calls</h2>

      <p>
      Remote Procedure Call メッセージ様式は
      次の3種類のメッセージによって実現されている。
      <!--The Remote Procedure Call messaging pattern is realized with 3 messages: -->
      </p>

      <ul>
         <li><span class="message_part">CALL</span></li>
         <li><span class="message_part">CALLRESULT</span></li>
         <li><span class="message_part">CALLERROR</span></li>
      </ul>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="call_message"></a>
      <h3>CALL Message</h3>

      <p>
        クライアントがこのメッセージをサーバに送ることでRPCを開始する。
         <!-- A client initiates a RPC by sending a message -->
      </p>
      <p class="message">[ TYPE_ID_CALL , callID , procURI , ... ]</p>
      <p><!-- to the server. --></p>

      <p>
      メッセージはJSONリストであり、次の内容からなる。
      先頭から順に:
      <span class="message_part">TYPE_ID_CALL</span>メッセージ種別
      メッセージ種別識別子の整数値、
      <!-- The message is a JSON list consisting of <span class="message_part">TYPE_ID_CALL</span>, the message type ID as an integer, followed -->
      <span class="message_part">callID</span> 
      クライアントがランダムに生成した文字列
      <!-- by the <span class="message_part">callID</span>, a string randomly generated by the client, followed by <span class="message_part">procURI</span>, -->
      <span class="message_part">procURI</span>,起動したいRPCのURI,
      そして0個以上の引数からなる。
      <!-- the URI of the remote procedure to be called, followed by zero or more call arguments. --></p>

      <p>
      <span class="message_part">callID</span> はランダムに生成された文字列で
      なければならない(MUST)。
      <!-- The <span class="message_part">callID</span> MUST be a randomly generated string. The <span class="message_part">callID</span> is returned -->
      <span class="message_part">callID</span>はサーバから返される
      <span class="message_part">CALLRESULT</span> メッセージ
      もしくは
      <span class="message_part">CALLERROR</span> メッセージの中で現れ、
      クライアントが返されたメッセージと元の呼び出しを関連づけるのに用いる。
      <!-- in <span class="message_part">CALLRESULT</span> or <span class="message_part">CALLERROR</span> by the server and used by the client to -->
      <!-- correlate the return message with the originating call. -->
      </p>

      <p>
      <span
      class="message_part">procURI</span>は、呼び出されるRPCを指定するURIであり、

      <!-- The <span class="message_part">procURI</span> is a string that identifies the remote procedure to be called and -->
      <a href="#curie">URI or CURIE</a>として妥当でなければならない(MUST)。
      <!-- MUST be a valid <a href="#curie">URI or CURIE</a>. -->
      </p>

      <div class="msgex">
         引数のないRPCの為の<span class="message_part">CALL</span>
         メッセージ例。
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [2, "7DK6TdN4wLiUJgNM", "http://example.com/api#howdy"]
         </pre>
      </div>

      <div class="msgex">
         2つの引数をもつRPCの為のメッセージ、CURIEを利用して指定した
         <span class="message_part">CALL</span> メッセージの例。
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [2, "Yp9EFZt9DFkuKndg", "api:add2", 23, 99]
         </pre>
      </div>

      <div class="msgex">
         複合オブジェクトを1つ引数に取るRPCを呼び出す
         <span class="message_part">CALL</span> メッセージの例。
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [2, "J5DkZJgByutvaDWc", "http://example.com/api#storeMeal",
               {
                  "category": "dinner",
                  "calories": 2309
               }]
         </pre>
      </div>

      <div class="msgex">
         1つの引数としてnullを取るRPCを呼び出す<span class="message_part">CALL</span>メッセージの例。
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [2, "Dns3wuQo0ipOX1Xc", "http://example.com/api#woooat", null]
         </pre>
      </div>

      <div class="msgex">
        1つの整数リストを取り、CURIEで指定されるRPCを呼び出す
         <span class="message_part">CALL</span> メッセージの例。
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [2, "M0nncaH0ywCSYzRv", "api:sum", [9, 1, 3, 4]]
         </pre>
      </div>

      <div class="msgex">
         (訳注: 原文は"<span class="message_part">CALL</span> 
         message for RPC with 1 argument, value being a list of integers, using CURIE
         "だが、明らかに例とマッチしない)
         文字列と辞書を引数に取るRPCを呼び出す<span class="message_part">CALL</span>
         メッセージの例、CURIを使ってRPCを指定している。
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [2, "ujL7WKGXCn8bkvFV", "keyvalue:set",
               "foobar",
               {
                  "value1": "23",
                  "value2": "singsing",
                  "value3": true,
                  "modified": "2012-03-29T10:29:16.625Z"
               }]
         </pre>
      </div>

      <p>
      When the execution of the remote procedure finishes, the server responds by sending a message of type
      remote procedureの実行が完了次第、
      <!-- When the execution of the remote procedure finishes, the server responds by sending a message of type -->
      サーバは<span class="message_part">CALLRESULT</span>メッセージ、
      もしくは<span
      class="message_part">CALLERROR</span>メッセージを送信する。
      <!-- <span class="message_part">CALLRESULT</span> or <span class="message_part">CALLERROR</span>.-->
      </p>

      <p>
      実行と送信は非同期的に行われ、それゆえ複数のRPCが未完了でありうる(MAY)。
      <!-- The execution and sending is asynchronous, and there MAY be more than one RPC outstanding. -->
      RPCが"未完了"(クライアントの視点から見て)とは、結果もしくはエラーが
      クライアントによって受信されていない事をさす。
      <!-- An RPC is called outstanding (from the point of view of the client), when a result or error has not -->
      <!-- yet been received by the client. -->
      </p>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="callresult_message"></a>
      <h3>CALLRESULT メッセージ (CALLRESULT Message)</h3>

      <p>
         <!-- When the execution of the remote procedure finishes successfully, the server responds by
         sending a -->
         リモート・プロセジャの実行が成功裏に終わった場合、サーバは次のメッセージをクライアントに送信する。
      </p>
      <p class="message">[ TYPE_ID_CALLRESULT , callID , result ]</p>
      <p><!--to the client.--></p>

      <p>
      The message is a JSON list consisting of 
      メッセージはJSONリストであり、それは次の要素で構成される。
      <span class="message_part">TYPE_ID_CALLRESULT</span> メッセージ種別識別子の整数、
      <span class="message_part">callID</span> クライアントによって生成された呼び出しを関連づける文字列、
      <span class="message_part">result</span> 結果の値である。
      <!-- The message is a JSON list consisting of <span class="message_part">TYPE_ID_CALLRESULT</span>, the message type ID as an integer, followed
      by the <span class="message_part">callID</span>, the call correlation string that was randomly generated by the client,
      followed by <span class="message_part">result</span>, the call result.
      -->
      </p>

      <p>
      <span class="message_part">result</span>
      は常に存在し、JSONで直列化された任意の値であり、それにはJSONの値、<i>null</i>を含む。
      <!-- The <span class="message_part">result</span> is always present and can be any JSON serializable value, include the JSON
      value <i>null</i>. --></p>

      <i>例</i>
      <div class="msgex">
         結果が'null' である<span class="message_part">CALLRESULT</span> メッセージ
         <!-- <span class="message_part">CALLRESULT</span> message with 'null' result -->
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [3, "CcDnuI2bl2oLGBzO", null]
         </pre>
      </div>
      <div class="msgex">
         'string' を結果にもつ<span class="message_part">CALLRESULT</span> メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [3, "otZom9UsJhrnzvLa", "Awesome result .."]
         </pre>
      </div>
      <div class="msgex">
         複合オブジェクトを結果に持つ<span class="message_part">CALLRESULT</span> メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [3, "CcDnuI2bl2oLGBzO",
               {
                  "value3": true,
                  "value2": "singsing",
                  "value1": "23",
                  "modified": "2012-03-29T10:29:16.625Z"
               }]
         </pre>
      </div>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="callerror_message"></a>
      <h3>CALLERROR メッセージ</h3>

      <p>
         リモートプロセジャの実行ができなかった場合、エラーもしくは例外が実行中に
         生じた場合、もしくはなんらかの理由によりリモートプロセジャの実行が失敗した場合、
         サーバは次のようなメッセージをクライアントに送信する。
         <!-- When the remote procedure call could not be executed, an error or exception occurred during the execution
         or the execution of the remote procedure finishes unsuccessfully for any other reason, the server responds
         by sending a either-->
      </p>
      <p class="message">[ TYPE_ID_CALLERROR , callID , errorURI , errorDesc ]</p>

      <p>もしくは<!-- or --></p>

      <p class="message">[ TYPE_ID_CALLERROR , callID , errorURI , errorDesc , errorDetails ]</p>

      <p><!-- to the client.--></p>

      <p>
      メッセージはJSONリストで、次の要素から構成される。
      <span class="message_part">TYPE_ID_CALLERROR</span>メッセージ種別識別子の整数、
      <span class="message_part">callID</span>は、クライアントによって生成された呼び出しを関連づける文字列、
      <span class="message_part">errorURI</span>は、エラーを識別する<a href="#curie">URI or CURIE</a>、
      <span class="message_part">errorDesc</span>は、文字列によるエラーの説明である。
      <!-- The message is a JSON list consisting of <span class="message_part">TYPE_ID_CALLERROR</span>, the message type ID as an integer,
      followed by the <span class="message_part">callID</span>, the call correlation string that was randomly generated by the client,
      followed by <span class="message_part">errorURI</span>, an <a href="#curie">URI or CURIE</a> identifying the error, followed by
      <span class="message_part">errorDesc</span>, a string with an error description.--></p>

      <p>
      <span
      class="message_part">errorDesc</span>は常に存在し、空文字列であってもよい(MAY)。
      もし空文字列でないならば、人間が読むことができるエラーの説明でなければならない(SHOULD)。
      その説明は開発者向けであり、エンドユーザに向けたものではない。
      <!-- The <span class="message_part">errorDesc</span> is always present, MAY be an empty string, and if non-empty SHOULD be
      a human-readable description of the error. The description is intended to be understood by developers, not end-users. -->
      </p>

      <p>
         もし <span class="message_part">errorDetails</span> が存在したならば、
         その値はnullであってはならない(MUST not)。
         そしてその値はアプリケーションのエラー詳細を伝えるために使われる。
         それらは<span class="message_part">errorURI</span>で定義される。
         <!-- If <span class="message_part">errorDetails</span> is present, it MUST be not null, and is used
         to communicate application error details, defined by the <span class="message_part">errorURI</span>. -->
      </p>

      <div class="msgex">
         一般的なエラーの<span class="message_part">CALLERROR</span> メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [4, "gwbN3EDtFv6JvNV5",
               "http://autobahn.tavendo.de/error#generic",
               "math domain error"]
         </pre>
      </div>

      <div class="msgex">
         特定のエラーとエラーの詳細に関して整数値をもつ
         <span class="message_part">CALLERROR</span> メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [4, "7bVW5pv8r60ZeL6u",
               "http://example.com/error#number_too_big",
               "1001 too big for me, max is 1000",
               1000]
         </pre>
      </div>

      <div class="msgex">
         整数リストをエラー詳細に持つ
         <span class="message_part">CALLERROR</span> メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [4, "AStPd8RS60pfYP8c",
               "http://example.com/error#invalid_numbers",
               "one or more numbers are multiples of 3",
               [0, 3]]
         </pre>
      </div>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="pubsub"></a>
      <h2>発行と購読(原文: Publish &amp; Subscribe、訳注: 「発行と引用」が普通かもしれない)</h2>

      <p>
      発行と購読のメッセージ様式は次の4つのメッセージ種別で実現される:
      <!-- The Publish &amp; Subscribe messaging pattern is realized with 4 messages: -->
      </p>

      <ul>
         <li><span class="message_part">SUBSCRIBE</span></li>
         <li><span class="message_part">UNSUBSCRIBE</span></li>
         <li><span class="message_part">PUBLISH</span></li>
         <li><span class="message_part">EVENT</span></li>
      </ul>

      <p>
         <span class="message_part">SUBSCRIBE</span> メッセージでトピックを購読することにより、
         クライアントは、<span class="message_part">EVENT</span> メッセージで
         該当のトピックに対する発行を非同期のイベントで通知される。
         購読はセッションの間、持続する。
         クライアントは<span class="message_part">UNSUBSCRIBE</span>メッセージで
         購読を停止することができる。
         <!-- Upon subscribing to a topic via the <span class="message_part">SUBSCRIBE</span> message,
         a client will be receiving asynchronous events published to the respective topic via
         the <span class="message_part">EVENT</span> message. Clients publish to a topic via
         the <span class="message_part">PUBLISH</span> message.
         An subscription lasts for the duration of a session, unless a client opts out from
         a previous subscription via the <span class="message_part">UNSUBSCRIBE</span> message. -->
      </p>

      <p>
         クライアントは0個以上のトピックを購読することができる(MAY)。
         クライアントはトピックに対して、トピックの購読者に関して知ることなく発行をを行う。
         <!-- A client may subscribe to zero, one or more topics, and clients publish to topics without
         knowledge of subscribers. -->
      </p>
      <p>
         WAMPv1 は、購読もしくは発行が失敗した場合にそれを知らせる機構を持たない。
         具体的には購読や発行が(訳注:サーバによって？)拒否された場合などである。
         クライアントが購読もしくは発行したときに、
         エラーの応答もなく、失敗したアクションはサーバに無視される。
         
         <!-- WAMPv1 has no feedback mechanism for when a subscribe or publish fails, i.e. when
         the subscription or publication is denied. When a client subscribes or publishes,
         there is no error feedback and a failed action is just silently ignored by the server. -->
      </p>
      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="subscribe_message"></a>
      <h3>SUBSCRIBE メッセージ</h3>
      <p>
      クライアントは
      妥当な<span class="message_part">topicURI</span> (もしくは PrefixのCURIE)
      を用いて、
      <span class="message_part">topicURI</span>が指定するトピックへ発行された
      イベントの受け取りを要求する.
      <!-- A client requests access to a valid <span class="message_part">topicURI</span> 
      (or CURIE from Prefix) to receive events published to the given <span class="message_part">topicURI</span>. -->
      </p>
      <p class="message">[ TYPE_ID_SUBSCRIBE , topicURI ]</p>

      <p>
      (購読の)セッションは、うまくいった購読(リクエスト)のもと、
      <span class="message_part">topicURI</span> Eventメッセージを
      受信することで始まる。
      要求は非同期的で、サーバは購読が開始されたことに対する了解応答を返さない。

      <!-- Upon a successful subscription the session will start receiving messages 
      in the EVENT in the context of the <span class="message_part">topicURI</span>.
      The request is asynchronous, the server will not return an acknowledgement of the subscription. -->
      </p>

      <i>例</i>

      <div class="msgex">
         fully qualified URIを用いた
         <span class="message_part">SUBSCRIBE</span> メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [5, "http://example.com/simple"]
         </pre>
      </div>

      <div class="msgex">
         CURIEを用いた<span class="message_part">SUBSCRIBE</span>メッセージ
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [5, "event:myevent1"]
         </pre>
      </div>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="unsubscribe_message"></a>
      <h3>UNSUBSCRIBE Message</h3>
      <p>Calling unsubscribe on a <span class="message_part">topicURI</span> informs the server to stop delivering messages to
      the client previously subscribed to that <span class="message_part">topicURI</span>.</p>
      <p class="message">[ TYPE_ID_UNSUBSCRIBE , topicURI ]</p>

      <i>Examples</i>

      <div class="msgex">
         <span class="message_part">UNSUBSCRIBE</span> message with fully qualified URI
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [6, "http://example.com/simple"]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">UNSUBSCRIBE</span> message with CURIE
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [6, "event:myevent1"]
         </pre>
      </div>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="publish_message"></a>
      <h3>PUBLISH Message</h3>
      <p>The client will send an event to all clients connected to the server who have subscribed to the <span class="message_part">topicURI</span>.</p>
      <p class="message">[ TYPE_ID_PUBLISH , topicURI , event ]</p>
      <p class="message">[ TYPE_ID_PUBLISH , topicURI , event , excludeMe ]</p>
      <p class="message">[ TYPE_ID_PUBLISH , topicURI , event , exclude , eligible ]</p>
      <p>If the client publishing their message to <span class="message_part">topicURI</span> has also Subscribed to that <span class="message_part">topicURI</span> they can opt to not receive
      their published event by passing the optional parameter <span class="message_part">excludeMe</span> to TRUE.</p>

      <i>Examples</i>

      <div class="msgex">
         <span class="message_part">PUBLISH</span> message with 'string' as payload
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [7, "http://example.com/simple", "Hello, world!"]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">PUBLISH</span> message with 'null' as payload
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [7, "http://example.com/simple", null]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">PUBLISH</span> message with complex object as payload
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [7, "http://example.com/event#myevent2",
               {
                  "rand": 0.09187032734575862,
                  "flag": false,
                  "num": 23,
                  "name":
                  "Kross",
                  "created": "2012-03-29T10:41:09.864Z"
               }]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">PUBLISH</span> message with exclude list
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [7, "event:myevent1",
               "hello",
               ["NwtXQ8rdfPsy-ewS", "dYqgDl0FthI6_hjb"]]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">PUBLISH</span> message with eligible list
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [7, "event:myevent1",
               "hello",
               [],
               ["NwtXQ8rdfPsy-ewS"]]
         </pre>
      </div>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="event_message"></a>
      <h3>EVENT Message</h3>
      <p>
         Subscribers receive PubSub events published by subscribers via the
         <span class="message_part">EVENT</span> message.
         The <span class="message_part">EVENT</span> message contains the
         <span class="message_part">topicURI</span>, the topic under which the
         event was published, and <span class="message_part">event</span>, the
         PubSub event payload.
      </p>

      <p class="message">[ TYPE_ID_EVENT , topicURI , event ]</p>

      <p>
         The <span class="message_part">topicURI</span> MUST be a fully qualified
         URI for the topic.
         The <span class="message_part">event</span> payload MUST always be
         present, and can be any simple or complex type or null.
      </p>

      <i>Examples</i>

      <div class="msgex">
         <span class="message_part">EVENT</span> message with 'string' as payload
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [8, "http://example.com/simple", "Hello, I am a simple event."]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">EVENT</span> message with 'null' as payload
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [8, "http://example.com/simple", null]
         </pre>
      </div>

      <div class="msgex">
         <span class="message_part">EVENT</span> message with complex object payload
         <pre class="brush: javascript; toolbar: false; auto-links: false; gutter: false;">
            [8, "http://example.com/event#myevent2",
               {
                  "rand": 0.09187032734575862,
                  "flag": false,
                  "num": 23,
                  "name": "Kross",
                  "created": "2012-03-29T10:41:09.864Z"
               }]
         </pre>
      </div>

      <div class="up">
            <a href="#top">Up</a>
         </div>


      <a name="references"></a>
      <h2>References</h2>

      <ol class="refs">
         <li>
            <a href="http://tools.ietf.org/html/rfc6455" target="_blank">The WebSocket Protocol</a>
         </li>
         <li>
            <a href="http://tools.ietf.org/html/rfc3629" target="_blank">UTF-8, a transformation format of ISO 10646</a>
         </li>
         <li>
            <a href="http://tools.ietf.org/html/rfc4627" target="_blank">The application/json Media Type for JavaScript Object Notation (JSON)</a>
         </li>
         <li>
            <a href="http://tools.ietf.org/html/rfc3986" target="_blank">Uniform Resource Identifier (URI): Generic Syntax, RFC 3986</a>
         </li>
         <li>
            <a href="http://www.w3.org/TR/curie/" target="_blank">CURIE Syntax 1.0</a>
         </li>
      </ol>
      <div class="up">
            <a href="#top">Up</a>
         </div>

   </div>




               </div>
            </div>

            <div style="clear: both;"></div>
         </div>
      </div>

      <div id="footer_wrapper">
         <center>
            WAMP&#8482; ウェブソケット・アプリケーション・メッセージングプロトコル - Asynchronous RPC and PubSub over WebSocket.
         </center>
         <center>
            WAMP and the <img style="position: relative; top: 3px;" src="/static/img/logo_tiny.png" width="60" height="16" border="0" alt="WAMP - ウェブソケット・アプリケーション・メッセージングプロトコル"></img>
            logo are trademarks of <a href="http://www.tavendo.de">Tavendo GmbH</a>.
            All other trademarks are those of their respective companies.
         </center>
         <center>
            Copyright &copy; 2012, Tavendo GmbH, content licensed under <span style="font-size: 14px;"><a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons CC-BY</a></span>.
         </center>
      </div>

      <div id="tweetme">
         <a href="https://twitter.com/share" class="twitter-share-button" data-url="http://wamp.ws" data-text="WAMP - an open WebSocket subprotocol that provides two asynchronous messaging patterns: RPC and PubSub." data-count="none" data-hashtags="websocket">Tweet</a>
         <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
      </div>

   </body>
</html>
